<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>会话管理 - 多AI聊天系统</title>
    <style>
        :root {
            --primary-color: #1976d2;
            --secondary-color: #f5f5f5;
            --border-color: #e0e0e0;
            --hover-color: #e3f2fd;
            --text-color: #333;
            --danger-color: #f44336;
        }
        
        body {
            font-family: 'PingFang SC', 'Helvetica Neue', Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f8f9fa;
            color: var(--text-color);
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            margin-bottom: 30px;
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 10px;
        }
        
        h1 {
            color: var(--primary-color);
            margin: 0;
        }
        
        .content {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }
        
        .panel {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            padding: 20px;
            overflow: hidden;
        }
        
        .panel-header {
            margin-bottom: 15px;
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .panel-title {
            font-size: 18px;
            font-weight: bold;
            color: var(--primary-color);
            margin: 0;
        }
        
        .list {
            max-height: 500px;
            overflow-y: auto;
        }
        
        .list-item {
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        .list-item:hover {
            background-color: var(--hover-color);
        }
        
        .list-item.selected {
            background-color: var(--hover-color);
            border-left: 3px solid var(--primary-color);
        }
        
        .item-content {
            flex: 1;
        }
        
        .item-title {
            font-weight: bold;
            margin-bottom: 4px;
        }
        
        .item-description {
            font-size: 14px;
            color: #666;
        }
        
        .item-actions {
            display: flex;
            gap: 8px;
        }
        
        .checkbox {
            margin-right: 10px;
        }
        
        .radio {
            margin-right: 10px;
        }
        
        .button-container {
            display: flex;
            justify-content: center;
            margin-top: 30px;
            gap: 15px;
        }
        
        button {
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }
        
        button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
        
        .primary-button {
            background-color: var(--primary-color);
            color: white;
        }
        
        .primary-button:hover:not(:disabled) {
            background-color: #1565c0;
        }
        
        .danger-button {
            background-color: var(--danger-color);
            color: white;
        }
        
        .danger-button:hover:not(:disabled) {
            background-color: #d32f2f;
        }
        
        .badge {
            display: inline-block;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 12px;
            color: white;
            background-color: var(--primary-color);
            margin-left: 8px;
        }
        
        .message {
            padding: 10px;
            margin: 15px 0;
            border-radius: 4px;
            display: none;
        }
        
        .message.success {
            background-color: #e8f5e9;
            color: #2e7d32;
            border-left: 4px solid #2e7d32;
        }
        
        .message.error {
            background-color: #ffebee;
            color: #c62828;
            border-left: 4px solid #c62828;
        }
        
        .loading {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            display: none;
        }
        
        .loading-spinner {
            width: 50px;
            height: 50px;
            border: 5px solid #f3f3f3;
            border-top: 5px solid var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        @media (max-width: 768px) {
            .content {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>会话管理</h1>
        </header>
        
        <div id="message" class="message"></div>
        
        <div class="content">
            <!-- 角色列表 - 支持多选 -->
            <div class="panel">
                <div class="panel-header">
                    <h2 class="panel-title">角色列表</h2>
                </div>
                <div class="list" id="role-list">
                    <!-- 角色列表项将在这里动态生成 -->
                    <div class="list-item">加载中...</div>
                </div>
            </div>
            
            <!-- 用户列表 - 支持单选 -->
            <div class="panel">
                <div class="panel-header">
                    <h2 class="panel-title">用户列表</h2>
                </div>
                <div class="list" id="user-list">
                    <!-- 用户列表项将在这里动态生成 -->
                    <div class="list-item">加载中...</div>
                </div>
            </div>
            
            <!-- 会话列表 - 显示现有会话和删除按钮 -->
            <div class="panel">
                <div class="panel-header">
                    <h2 class="panel-title">会话列表</h2>
                </div>
                <div class="list" id="session-list">
                    <!-- 会话列表项将在这里动态生成 -->
                    <div class="list-item">加载中...</div>
                </div>
            </div>
        </div>
        
        <div class="button-container">
            <button id="create-session-btn" class="primary-button" disabled>创建会话</button>
            <button id="refresh-btn" class="primary-button">刷新数据</button>
        </div>
    </div>
    
    <div class="loading" id="loading">
        <div class="loading-spinner"></div>
    </div>
    
    <script>
        // 全局变量
        let roles = [];
        let users = [];
        let sessions = [];
        let selectedRoleIds = [];
        let selectedUserId = null;
        
        // 页面加载完成后执行
        document.addEventListener('DOMContentLoaded', function() {
            // 初始化
            console.log('Page loaded, initializing...');
            
            // 初始化变量
            roles = [];
            users = [];
            sessions = [];
            selectedRoleIds = [];
            selectedUserId = null;
            
            initPage();
            
            // 绑定创建会话按钮事件
            document.getElementById('create-session-btn').addEventListener('click', createSession);
            
            // 绑定刷新按钮事件
            document.getElementById('refresh-btn').addEventListener('click', initPage);
        });
        
        // 显示加载状态
        function showLoading() {
            document.getElementById('loading').style.display = 'flex';
        }
        
        // 隐藏加载状态
        function hideLoading() {
            document.getElementById('loading').style.display = 'none';
        }
        
        // 显示消息
        function showMessage(text, type) {
            const messageEl = document.getElementById('message');
            messageEl.textContent = text;
            messageEl.className = `message ${type}`;
            messageEl.style.display = 'block';
            
            // 5秒后自动隐藏
            setTimeout(() => {
                messageEl.style.display = 'none';
            }, 5000);
        }
        
        // 初始化页面
        async function initPage() {
            showLoading();
            console.log('Initializing page...');
            
            try {
                // 并行获取角色、用户和会话数据
                const [rolesResponse, usersResponse, sessionsResponse] = await Promise.all([
                    fetch('/api/roles').then(resp => {
                        if (!resp.ok) throw new Error(`角色数据获取失败: ${resp.status}`);
                        return resp.json();
                    }),
                    fetch('/api/users/').then(resp => {
                        if (!resp.ok) throw new Error(`用户数据获取失败: ${resp.status}`);
                        return resp.json();
                    }),
                    fetch('/api/memory/sessions').then(resp => {
                        if (!resp.ok) throw new Error(`会话数据获取失败: ${resp.status}`);
                        return resp.json();
                    })
                ]);
                
                // 确保数据格式正确
                roles = Array.isArray(rolesResponse) ? rolesResponse : [];
                users = Array.isArray(usersResponse) ? usersResponse : [];
                sessions = Array.isArray(sessionsResponse) ? sessionsResponse : [];
                
                console.log('Data loaded:', {
                    roles: roles.length,
                    users: users.length,
                    sessions: sessions.length
                });
                
                // 渲染列表
                renderRoleList();
                renderUserList();
                renderSessionList();
                
                // 初始化完成后强制更新按钮状态
                forceUpdateButtonState();
                
            } catch (error) {
                console.error('初始化页面失败:', error);
                showMessage(`加载数据失败: ${error.message}`, 'error');
                
                // 确保即使失败也初始化为空数组
                roles = roles || [];
                users = users || [];
                sessions = sessions || [];
                
                // 渲染空列表
                renderRoleList();
                renderUserList();
                renderSessionList();
            } finally {
                hideLoading();
            }
        }
        
        // 渲染角色列表
        function renderRoleList() {
            const roleList = document.getElementById('role-list');
            roleList.innerHTML = '';
            
            roles.forEach(role => {
                const item = document.createElement('div');
                item.className = 'list-item';
                item.dataset.id = role._id;
                
                const isSelected = selectedRoleIds.includes(role._id);
                if (isSelected) {
                    item.classList.add('selected');
                }
                
                item.innerHTML = `
                    <input type="checkbox" class="checkbox" ${isSelected ? 'checked' : ''}>
                    <div class="item-content">
                        <div class="item-title">${role.name}</div>
                        <div class="item-description">${role.description || '无描述'}</div>
                    </div>
                `;
                
                // 简化事件处理
                item.addEventListener('click', function(e) {
                    const checkbox = this.querySelector('.checkbox');
                    
                    // 如果点击的是checkbox本身，不修改它的状态（浏览器已经处理）
                    if (e.target !== checkbox) {
                        checkbox.checked = !checkbox.checked;
                    }
                    
                    // 根据checkbox状态更新选择
                    if (checkbox.checked) {
                        if (!selectedRoleIds.includes(role._id)) {
                            selectedRoleIds.push(role._id);
                        }
                        this.classList.add('selected');
                    } else {
                        selectedRoleIds = selectedRoleIds.filter(id => id !== role._id);
                        this.classList.remove('selected');
                    }
                    
                    // 强制更新按钮状态
                    forceUpdateButtonState();
                    
                    console.log('Role selection:', {
                        roleId: role._id,
                        roleName: role.name,
                        checked: checkbox.checked,
                        selectedRoles: selectedRoleIds
                    });
                });
                
                roleList.appendChild(item);
            });
            
            // 如果没有角色数据
            if (roles.length === 0) {
                roleList.innerHTML = '<div class="list-item">暂无角色数据</div>';
            }
            
            // 初始化时强制更新按钮状态
            forceUpdateButtonState();
        }
        
        // 强制更新按钮状态 - 确保按钮正确启用/禁用
        function forceUpdateButtonState() {
            const createButton = document.getElementById('create-session-btn');
            const hasUser = selectedUserId !== null && selectedUserId !== undefined;
            const hasRoles = selectedRoleIds.length > 0;
            
            createButton.disabled = !(hasUser && hasRoles);
            
            console.log('Button state updated:', {
                hasUser: hasUser,
                userId: selectedUserId,
                hasRoles: hasRoles,
                roleCount: selectedRoleIds.length,
                buttonDisabled: createButton.disabled
            });
            
            // 清除并重设按钮样式，强制浏览器重绘
            createButton.style.opacity = "0.99";
            setTimeout(() => {
                createButton.style.opacity = "";
            }, 10);
        }
        
        // 渲染用户列表
        function renderUserList() {
            const userList = document.getElementById('user-list');
            userList.innerHTML = '';
            
            users.forEach(user => {
                const item = document.createElement('div');
                item.className = 'list-item';
                item.dataset.id = user._id;
                
                const isSelected = selectedUserId === user._id;
                if (isSelected) {
                    item.classList.add('selected');
                }
                
                item.innerHTML = `
                    <input type="radio" name="user" class="radio" ${isSelected ? 'checked' : ''}>
                    <div class="item-content">
                        <div class="item-title">${user.name || user.username}</div>
                        <div class="item-description">${user.email || '无附加信息'}</div>
                    </div>
                `;
                
                // 绑定点击事件
                item.addEventListener('click', function() {
                    // 移除其他选中状态
                    document.querySelectorAll('#user-list .list-item').forEach(el => {
                        el.classList.remove('selected');
                        el.querySelector('.radio').checked = false;
                    });
                    
                    // 设置当前选中
                    this.classList.add('selected');
                    this.querySelector('.radio').checked = true;
                    selectedUserId = user._id;
                    
                    // 强制更新按钮状态
                    forceUpdateButtonState();
                    
                    console.log('User selected:', {
                        userId: user._id,
                        userName: user.name || user.username
                    });
                });
                
                userList.appendChild(item);
            });
            
            // 如果没有用户数据
            if (users.length === 0) {
                userList.innerHTML = '<div class="list-item">暂无用户数据</div>';
            }
        }
        
        // 渲染会话列表
        function renderSessionList() {
            const sessionList = document.getElementById('session-list');
            sessionList.innerHTML = '';
            
            if (!Array.isArray(sessions)) {
                sessionList.innerHTML = '<div class="list-item">会话数据格式错误</div>';
                // 确保即使会话列表有问题，也不影响创建会话按钮状态
                sessions = [];
                forceUpdateButtonState();
                return;
            }
            
            sessions.forEach(session => {
                const item = document.createElement('div');
                item.className = 'list-item';
                item.dataset.id = session._id || session.session_id;
                
                // 查找会话所属用户
                const userId = session.user_id || (session.metadata && session.metadata.user_id);
                const user = users.find(u => u._id === userId);
                const userName = user ? (user.name || user.username) : '未知用户';
                
                // 会话创建时间
                const createdAt = session.created_at || session.timestamp || new Date().toISOString();
                const createdDate = new Date(createdAt).toLocaleString();
                
                // 会话标题
                const title = session.title || session.name || '未命名会话';
                
                item.innerHTML = `
                    <div class="item-content">
                        <div class="item-title">${title}</div>
                        <div class="item-description">
                            用户: ${userName} | 创建时间: ${createdDate}
                        </div>
                    </div>
                    <div class="item-actions">
                        <button class="danger-button delete-btn">删除</button>
                    </div>
                `;
                
                // 绑定删除按钮事件
                item.querySelector('.delete-btn').addEventListener('click', function(e) {
                    e.stopPropagation();
                    deleteSession(session._id || session.session_id);
                });
                
                sessionList.appendChild(item);
            });
            
            // 如果没有会话数据
            if (sessions.length === 0) {
                sessionList.innerHTML = '<div class="list-item">暂无会话数据</div>';
            }
            
            // 确保会话列表渲染后更新按钮状态
            forceUpdateButtonState();
        }
        
        // 创建会话
        async function createSession() {
            console.log('Create session button clicked');
            
            // 手动校验选择是否有效
            if (!selectedUserId) {
                showMessage('请选择一个用户', 'error');
                console.error('No user selected');
                return;
            }
            
            if (selectedRoleIds.length === 0) {
                showMessage('请选择至少一个角色', 'error');
                console.error('No roles selected');
                return;
            }
            
            // 显示当前状态
            console.log('Creating session with:', {
                userId: selectedUserId,
                roleIds: selectedRoleIds,
                buttonState: document.getElementById('create-session-btn').disabled
            });
            
            showLoading();
            
            try {
                // 构建请求数据
                const requestData = {
                    user_id: selectedUserId,
                    role_ids: selectedRoleIds
                };
                
                console.log('Sending request with data:', requestData);
                
                // 发送创建会话请求
                const response = await fetch('/api/memory/session/create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(requestData)
                });
                
                // 获取响应文本，用于调试
                const responseText = await response.text();
                console.log('Server response:', response.status, responseText);
                
                // 尝试解析JSON
                let result;
                try {
                    result = JSON.parse(responseText);
                } catch (e) {
                    console.error('Failed to parse JSON response:', e);
                    throw new Error(`服务器返回了无效的JSON: ${responseText}`);
                }
                
                if (!response.ok) {
                    throw new Error(`服务器返回错误 (${response.status}): ${result.message || responseText}`);
                }
                
                if (result.success) {
                    // 重新获取会话列表
                    showMessage('会话创建成功！', 'success');
                    
                    try {
                        const sessionsResponse = await fetch('/api/memory/sessions');
                        if (!sessionsResponse.ok) {
                            console.warn('Failed to refresh sessions after creation:', sessionsResponse.status);
                        } else {
                            const sessionsData = await sessionsResponse.json();
                            sessions = Array.isArray(sessionsData) ? sessionsData : [];
                            renderSessionList();
                        }
                    } catch (refreshError) {
                        console.warn('Error refreshing sessions:', refreshError);
                    }
                    
                    // 重置选择状态
                    selectedRoleIds = [];
                    document.querySelectorAll('#role-list .list-item').forEach(el => {
                        el.classList.remove('selected');
                        el.querySelector('.checkbox').checked = false;
                    });
                    
                    // 更新按钮状态
                    forceUpdateButtonState();
                } else {
                    throw new Error(result.message || '创建会话失败，服务器未返回成功状态');
                }
            } catch (error) {
                console.error('创建会话失败:', error);
                showMessage(`创建会话失败: ${error.message}`, 'error');
            } finally {
                hideLoading();
            }
        }
        
        // 删除会话
        async function deleteSession(sessionId) {
            if (!confirm('确定要删除这个会话吗？此操作不可恢复。')) {
                return;
            }
            
            showLoading();
            
            try {
                const response = await fetch(`/api/memory/session/${sessionId}/delete`, {
                    method: 'DELETE'
                });
                
                if (!response.ok) {
                    throw new Error('删除会话失败');
                }
                
                const result = await response.json();
                
                if (result.success) {
                    // 从本地列表中移除
                    sessions = sessions.filter(s => (s._id || s.session_id) !== sessionId);
                    renderSessionList();
                    
                    // 显示成功消息
                    showMessage('会话删除成功！', 'success');
                } else {
                    throw new Error(result.message || '删除会话失败');
                }
            } catch (error) {
                console.error('删除会话失败:', error);
                showMessage(`删除会话失败: ${error.message}`, 'error');
            } finally {
                hideLoading();
            }
        }
    </script>
</body>
</html> 